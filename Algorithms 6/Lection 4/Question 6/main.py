def solve():
    # Чтение входных данных
    N = int(input())  # Количество сотрудников
    if N == 1:
        print(1)
        return

    # Ввод данных о начальниках для сотрудников
    a = list(map(int, input().split()))  # Список начальников для сотрудников

    # Строим дерево, для каждого сотрудника храним его подчинённых
    children = [[] for _ in range(N + 1)]
    for i in range(2, N + 1):
        children[a[i - 2]].append(i)

    # Массив монет для каждого сотрудника
    coins = [0] * (N + 1)

    # Функция для обхода дерева и подсчета монет
    def dfs(v, depth):
        # Все подчиненные передают задачу дальше
        if not children[v]:  # Если нет подчинённых, значит, работник выполняет задачу
            for i in range(depth):
                coins[v] += i + 1  # Получает монеты в зависимости от глубины
            return 1  # Этот сотрудник выполнил задание
        else:
            # Иначе передаем задачу по цепочке
            total = 0
            for child in sorted(children[v]):
                total += dfs(child, depth + 1)
            return total

    # Запускаем DFS с вершины 1 (Мирко)
    dfs(1, 1)

    # Печатаем монеты для каждого сотрудника
    print(" ".join(map(str, coins[1:])))


# Вызов функции решения
solve()
